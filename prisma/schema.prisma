generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  slug           String      @unique(map: "product_slug_idx")
  category       String
  images         String[]
  brand          String
  description    String
  stock          Int         @default(0)
  price          Decimal     @default(0) @db.Decimal(12, 2)
  rating         Decimal     @default(0) @db.Decimal(3, 2)
  numReviews     Int         @default(0)
  isFeatured     Boolean     @default(false)
  banner         String?
  costPrice      Decimal     @default(0) @db.Decimal(12, 2)
  sku            String      @unique // ✅ Ensures SKU uniqueness
  createdAt      DateTime    @default(now()) @db.Timestamp(6)
  isDiscontinued Boolean     @default(false)
  isDiscounted   Boolean     @default(false) // New column for discount eligibility
  discountRate   Int? // New column for discount percentage (nullable)
  orderItems     OrderItem[] // ✅ Renamed from "OrderItem" for better consistency
  reviews        Review[] // ✅ Renamed from "Review" for better consistency

  @@index([category]) // ✅ Improves query performance
  @@index([brand]) // ✅ Faster lookup by brand
  @@index([createdAt]) // ✅ Allows sorting by creation date
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_index")
  password      String?
  role          String    @default("user")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  cart          Cart[]
  Order         Order[]
  Review        Review[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cart_userId_user_id_fk")
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[] // ✅ Ensures cascading delete

  @@index([userId]) // ✅ Speeds up user order queries
  @@index([createdAt]) // ✅ Allows sorting by latest orders
  @@index([isDelivered]) // ✅ Index to quickly filter delivered orders
  @@index([isPaid]) // ✅ Faster query for paid orders
}

model OrderItem {
  orderId    String  @db.Uuid
  productId  String  @db.Uuid
  qty        Int
  unitPrice  Decimal @db.Decimal(12, 2) // ✅ Stores price per unit to avoid incorrect calculations
  totalPrice Decimal @db.Decimal(12, 2) // ✅ Stores total for easy calculations
  name       String
  slug       String
  image      String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@id([orderId, productId]) // ✅ Ensures uniqueness for order-product combination
  @@index([orderId]) // ✅ Speeds up order lookups
  @@index([productId]) // ✅ Speeds up product-based sales lookups
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_productId_product_id_fk")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_userId_user_id_fk")
}
